Directory structure:
└── voting/
    ├── Cargo.toml
    ├── src/
    │   ├── main.rs
    │   ├── client/
    │   ├── core/
    │   │   ├── election.rs
    │   │   ├── mod.rs
    │   │   ├── voter.rs
    │   │   └── zkproof.rs
    │   ├── server/
    │   ├── services/
    │   │   ├── mod.rs
    │   │   └── voting.rs
    │   └── shared/
    │       ├── ballot.rs
    │       ├── commitment.rs
    │       └── mod.rs
    ├── voting-client-cli/
    │   ├── Cargo.toml
    │   └── src/
    │       └── main.rs
    ├── voting-core/
    │   ├── Cargo.toml
    │   ├── src/
    │   │   ├── error.rs
    │   │   ├── lib.rs
    │   │   ├── crypto/
    │   │   │   ├── commitment.rs
    │   │   │   ├── elgamal.rs
    │   │   │   ├── mod.rs
    │   │   │   ├── parameters.rs
    │   │   │   └── zkproof.rs
    │   │   ├── models/
    │   │   │   ├── ballot.rs
    │   │   │   ├── election.rs
    │   │   │   ├── mod.rs
    │   │   │   └── voter.rs
    │   │   └── services/
    │   │       ├── mod.rs
    │   │       └── voting.rs
    │   └── tests/
    │       ├── crypto_test.rs
    │       └── election_test.rs
    └── voting-server/
        ├── Cargo.toml
        └── src/
            └── main.rs

================================================
File: Cargo.toml
================================================
[workspace]
members = [
    "voting-core",
    "voting-server",
    "voting-client-cli"
]
resolver = "3"

[workspace.package]
version = "0.1.0"
edition = "2024"
authors = ["Erwan Leboucher"]


[workspace.dependencies]
uuid = { version = "1.6", features = ["serde", "v4"] }
serde = { version = "1.0", features = ["derive"] }
rand = "0.8"
blake3 = "1.5"
hex = "0.4"
thiserror = "1.0"



================================================
File: src/main.rs
================================================
mod crypto;
mod models;
use models::election::Election;
use models::voter::Voter;
mod error;
mod services;
use services::voting::VotingService;
fn main() {
    let voter1 = Voter::new();
    let voter2 = Voter::new();
    let mut election = Election::new(
        "Sample Election".to_string(),
        vec!["Option A".to_string(), "Option B".to_string()],
    );
    election.add_voter(voter1.clone());
    election.add_voter(voter2.clone());
    let receipt = VotingService::vote(&mut election, voter1.id, "Option B").unwrap();
    let receipt2 = VotingService::vote(&mut election, voter2.id, "Option A").unwrap();
    println!("Receipt 1: {}", receipt);
    println!("Receipt 2: {}", receipt2);
    println!("{}", election.nb_ballot());
    let vote_res = VotingService::tally(&election);
    println!("{:?}", vote_res);

    let is_valid = election.verify_vote("some_receipt", "Option A");
    println!("Vote verification: {}", is_valid);
    let is_valid = election.verify_vote(&receipt, "Option A");
    println!("Vote verification: {}", is_valid);

    let inclusion_proof = election.generate_inclusion_proof(&receipt);
    println!("Inclusion proof: {:?}", inclusion_proof);
}




================================================
File: src/core/election.rs
================================================
use super::voter::Voter;
use super::{ballot::Ballot, voter::VoterRegistryEntry};
use crate::error::{Result, VotingError};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Election {
    pub id: Uuid,
    pub name: String,
    pub choices: Vec<String>,
    voters: HashMap<Uuid, VoterRegistryEntry>,
    pub ballots: Vec<Ballot>,

    encryption_key: String,
}

impl Election {
    pub fn new(name: String, choices: Vec<String>) -> Self {
        Election {
            id: Uuid::new_v4(),
            name,
            choices,
            voters: HashMap::new(),
            ballots: Vec::new(),
            encryption_key: Uuid::new_v4().to_string(),
        }
    }

    pub fn add_voter(&mut self, voter: Voter) {
        self.voters.insert(
            voter.id,
            VoterRegistryEntry {
                voter,
                has_voted: false,
            },
        );
    }

    pub fn nb_ballot(&self) -> usize {
        self.ballots.len()
    }

    pub fn is_allowed_voters(&self, voter_id: Uuid) -> bool {
        self.voters.contains_key(&voter_id)
    }

    pub fn is_valid_choice(&self, choice: &str) -> bool {
        self.choices.contains(&choice.to_string())
    }

    pub fn add_ballot(&mut self, ballot: Ballot) -> Result<String> {
        self.ballots.push(ballot);
        Ok(self.ballots.last().unwrap().get_receipt())
    }
    pub fn has_voted(&self, voter_id: &Uuid) -> bool {
        self.voters
            .get(voter_id)
            .is_some_and(|entry| entry.has_voted)
    }
    pub fn set_voted(&mut self, voter_id: &Uuid) {
        if let Some(entry) = self.voters.get_mut(voter_id) {
            entry.has_voted = true;
        }
    }

    pub fn get_ballot_by_id(&self, ballot_id: Uuid) -> Option<&Ballot> {
        self.ballots.iter().find(|b| b.id == ballot_id)
    }

    pub fn generate_inclusion_proof(&self, receipt: &str) -> Option<String> {
        let parts = receipt.split(':').collect::<Vec<&str>>();
        if parts.len() != 2 {
            return None;
        }
        let ballot_id = parts[0];
        for (index, ballot) in self.ballots.iter().enumerate() {
            if ballot.id.to_string() == ballot_id {
                return Some(format!("Ballot found at position {}", index));
            }
        }
        None
    }
    pub fn verify_vote(&self, receipt: &str, claimed_choice: &str) -> bool {
        let parts = receipt.split(':').collect::<Vec<&str>>();
        if parts.len() != 2 {
            return false;
        }
        let ballot_id = parts[0];
        for ballot in &self.ballots {
            if ballot.id.to_string() == ballot_id {
                let proof = ballot.generate_proof_for_choice(claimed_choice);
                return proof.verify();
            }
        }
        false
    }
}



================================================
File: src/core/mod.rs
================================================
pub mod election;
pub mod voter;
pub mod zkproof;



================================================
File: src/core/voter.rs
================================================
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Voter {
    pub id: Uuid,
}

impl Voter {
    pub fn new() -> Self {
        Voter { id: Uuid::new_v4() }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VoterRegistryEntry {
    pub voter: Voter,
    pub has_voted: bool,
}



================================================
File: src/core/zkproof.rs
================================================
use super::commitment::verify_commitment;

pub struct ZKProof {
    pub commitment: String,
    pub claimed_choice: String,
    pub nonce: String,
}

impl ZKProof {
    pub fn verify(&self) -> bool {
        verify_commitment(&self.commitment, &self.claimed_choice, &self.nonce)
    }
}




================================================
File: src/services/mod.rs
================================================
pub mod voting;



================================================
File: src/services/voting.rs
================================================
use std::collections::HashMap;

use crate::crypto::commitment::Commitment;
use crate::error::{Result, VotingError};
use crate::models::ballot::Ballot;
use crate::models::election::Election;
use uuid::Uuid;
pub struct VotingService;

impl VotingService {
    pub fn vote(election: &mut Election, voter_id: Uuid, choice: &str) -> Result<String> {
        if !election.is_allowed_voters(voter_id) {
            return Err(VotingError::VoterNotFound);
        }

        if !election.is_valid_choice(choice) {
            return Err(VotingError::InvalidChoice);
        }
        if election.has_voted(&voter_id) {
            return Err(VotingError::AlreadyVoted);
        }
        // Create a new commitment for the choice
        let commitment = Commitment::new(choice);
        let ballot = Ballot::new(commitment);
        let receipt = election.add_ballot(ballot)?;
        election.set_voted(&voter_id);
        Ok(receipt)
    }

    pub fn verify_vote(election: &Election, receipt: &str, claimed_choice: &str) -> bool {
        let parts: Vec<&str> = receipt.split(':').collect();
        if parts.len() != 2 {
            return false;
        }
        let ballot_id = Uuid::parse_str(parts[0]).unwrap();

        if let Some(ballot) = election.get_ballot_by_id(ballot_id) {
            // Verify the commitment
            let proof = ballot.generate_proof_for_choice(claimed_choice);
            if proof.verify() {
                return true;
            }
        }
        false
    }

    pub fn tally(election: &Election) -> HashMap<String, usize> {
        let mut tally = HashMap::new();
        for ballot in &election.ballots {
            let choice = ballot.commitment.clone();
            *tally.entry(choice).or_insert(0) += 1;
        }
        tally
    }
}



================================================
File: src/shared/ballot.rs
================================================
use crate::crypto::{commitment::Commitment, zkproof::ZKProof};
use serde::{Deserialize, Serialize};
use std::fmt;
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Ballot {
    pub id: Uuid,
    pub commitment: String,

    #[serde(skip_serializing)]
    #[serde(skip_deserializing)]
    choice_commitment: Commitment,
}

impl Ballot {
    pub fn new(commitment: Commitment) -> Self {
        Ballot {
            id: Uuid::new_v4(),
            commitment: commitment.commitment.clone(),
            choice_commitment: commitment,
        }
    }
    pub fn get_receipt(&self) -> String {
        format!("{}:{}", self.id, self.commitment)
    }
    pub fn generate_proof_for_choice(&self, claimed_choice: &str) -> ZKProof {
        self.choice_commitment
            .create_proof_of_commitment(claimed_choice)
    }

    // Check if this ballot is for a specific choice using the commitment
    pub fn is_vote_for(&self, proof: ZKProof) -> bool {
        proof.verify()
    }
}

impl fmt::Display for Ballot {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.get_receipt())
    }
}



================================================
File: src/shared/commitment.rs
================================================
use super::zkproof::ZKProof;
use blake3::Hasher;
use hex;
use rand::TryRngCore;
use rand::rngs::OsRng;

#[derive(Debug, Clone, Default)]
pub struct Commitment {
    pub commitment: String,
    choice: String,
    nonce: String,
}

impl Commitment {
    pub fn new(choice: &str) -> Self {
        let mut nonce_bytes = [0u8; 32];
        OsRng.try_fill_bytes(&mut nonce_bytes).unwrap();
        let nonce = hex::encode(nonce_bytes);
        let commitment = compute_commitment(choice, &nonce);
        Commitment {
            commitment,
            choice: choice.to_string(),
            nonce,
        }
    }

    pub fn create_proof_of_commitment(&self, claimed_choice: &str) -> ZKProof {
        if claimed_choice == self.choice {
            ZKProof {
                commitment: self.commitment.clone(),
                claimed_choice: claimed_choice.to_string(),
                nonce: self.nonce.clone(),
            }
        } else {
            ZKProof {
                commitment: self.commitment.clone(),
                claimed_choice: self.choice.clone(),
                nonce: "invalid".to_string(),
            }
        }
    }
}

fn compute_commitment(choice: &str, nonce: &str) -> String {
    let mut hash = Hasher::new();
    hash.update(choice.as_bytes());
    hash.update(nonce.as_bytes());
    let result = hash.finalize();
    hex::encode(result.as_bytes())
}

pub fn verify_commitment(commitment: &str, claimed_choice: &str, nonce: &str) -> bool {
    let computed_commitment = compute_commitment(claimed_choice, nonce);
    commitment == computed_commitment
}



================================================
File: src/shared/mod.rs
================================================
pub mod ballot;
pub mod commitment;



================================================
File: voting-client-cli/Cargo.toml
================================================
[package]
name = "voting-client-cli"
version = "0.1.0"
edition = "2024"

[dependencies]



================================================
File: voting-client-cli/src/main.rs
================================================
fn main() {
    println!("Hello, world!");
}



================================================
File: voting-core/Cargo.toml
================================================
[package]
name = "voting-core"
version.workspace = true
edition.workspace = true

[dependencies]
uuid = { workspace = true }
serde = { workspace = true }
rand = { workspace = true }
blake3 = { workspace = true }
hex = { workspace = true }
thiserror = { workspace = true }
num-bigint = { version = "0.4", features = ["serde", "rand"] }
num-traits = "0.2"
num-integer = "0.1"

[dev-dependencies]
criterion = "0.5"



================================================
File: voting-core/src/error.rs
================================================
use thiserror::Error;

#[derive(Debug, Error)]
pub enum VotingError {
    #[error("Voter not found")]
    VoterNotFound,

    #[error("Invalid choice")]
    InvalidChoice,

    #[error("Invalid ballot")]
    InvalidBallot,

    #[error("Ballot already cast")]
    AlreadyVoted,

    #[error("Ballot not found")]
    BallotNotFound,

    #[error("Invalid election")]
    InvalidElection,

    #[error("Election not found")]
    ElectionNotFound,

    // Add new crypto-specific errors
    #[error("Invalid cryptographic parameters")]
    InvalidParameters,

    #[error("Encryption failed: {0}")]
    EncryptionError(String),

    #[error("Decryption failed: {0}")]
    DecryptionError(String),

    #[error("Invalid zero-knowledge proof")]
    InvalidProof,

    #[error("Insufficient trustees: need {needed}, have {available}")]
    InsufficientTrustees { needed: usize, available: usize },
}

pub type Result<T> = std::result::Result<T, VotingError>;



================================================
File: voting-core/src/lib.rs
================================================
pub mod crypto;
pub mod error;
pub mod models;
pub mod services;

pub use error::{Result, VotingError};



================================================
File: voting-core/src/crypto/commitment.rs
================================================
use super::zkproof::ZKProof;
use blake3::Hasher;
use hex;
use rand::RngCore;
use rand::rngs::OsRng;

#[derive(Debug, Clone, Default)]
pub struct Commitment {
    pub commitment: String,
    choice: String,
    nonce: String,
}

impl Commitment {
    pub fn new(choice: &str) -> Self {
        let mut nonce_bytes = [0u8; 32];
        OsRng.fill_bytes(&mut nonce_bytes);
        let nonce = hex::encode(nonce_bytes);
        let commitment = compute_commitment(choice, &nonce);
        Commitment {
            commitment,
            choice: choice.to_string(),
            nonce,
        }
    }

    pub fn create_proof_of_commitment(&self, claimed_choice: &str) -> ZKProof {
        if claimed_choice == self.choice {
            ZKProof {
                commitment: self.commitment.clone(),
                claimed_choice: claimed_choice.to_string(),
                nonce: self.nonce.clone(),
            }
        } else {
            ZKProof {
                commitment: self.commitment.clone(),
                claimed_choice: self.choice.clone(),
                nonce: "invalid".to_string(),
            }
        }
    }
    #[deprecated]
    pub fn reveal_choice_unsafe(&self) -> &str {
        &self.choice
    }
}

fn compute_commitment(choice: &str, nonce: &str) -> String {
    let mut hash = Hasher::new();
    hash.update(choice.as_bytes());
    hash.update(nonce.as_bytes());
    let result = hash.finalize();
    hex::encode(result.as_bytes())
}

pub fn verify_commitment(commitment: &str, claimed_choice: &str, nonce: &str) -> bool {
    let computed_commitment = compute_commitment(claimed_choice, nonce);
    commitment == computed_commitment
}



================================================
File: voting-core/src/crypto/elgamal.rs
================================================
use super::parameters::CryptoParams;
use num_bigint::{BigUint, RandBigInt};
use num_traits::{One, Zero};
use rand::thread_rng;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct PublicKey {
    /// h = g^x mod p (where x is the secret key)
    pub h: BigUint,
}

#[derive(Debug, Clone)]
pub struct SecretKey {
    /// The secret exponent
    pub x: BigUint,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct Ciphertext {
    /// c1 = g^r mod p
    pub c1: BigUint,
    /// c2 = m * h^r mod p
    pub c2: BigUint,
}

pub fn generate_keypair(params: &CryptoParams) -> (PublicKey, SecretKey) {
    let mut rng = thread_rng();

    // Generate random secret key x in range [1, p-2]
    let x = rng.gen_biguint_range(&BigUint::one(), &(&params.p - 2u32));

    // Compute public key h = g^x mod p
    let h = params.g.modpow(&x, &params.p);

    (PublicKey { h }, SecretKey { x })
}

/// Encrypt a message (for votes, this will be g^vote_choice)
pub fn encrypt(
    message: &BigUint,
    public_key: &PublicKey,
    params: &CryptoParams,
) -> (Ciphertext, BigUint) {
    let mut rng = thread_rng();

    // Generate random r in range [1, p-2]
    let r = rng.gen_biguint_range(&BigUint::one(), &(&params.p - 2u32));

    // c1 = g^r mod p
    let c1 = params.g.modpow(&r, &params.p);

    // c2 = m * h^r mod p
    let hr = public_key.h.modpow(&r, &params.p);
    let c2 = (message * hr) % &params.p;

    (Ciphertext { c1, c2 }, r)
}

/// Decrypt a ciphertext
pub fn decrypt(ciphertext: &Ciphertext, secret_key: &SecretKey, params: &CryptoParams) -> BigUint {
    // Compute c1^x mod p
    let c1_x = ciphertext.c1.modpow(&secret_key.x, &params.p);

    // Compute the inverse of c1^x mod p
    let c1_x_inv = c1_x.modpow(&(&params.p - 2u32), &params.p);

    // m = c2 * (c1^x)^(-1) mod p
    (ciphertext.c2.clone() * c1_x_inv) % &params.p
}

/// Encode a vote choice as a group element
/// We use exponential ElGamal: encode choice i as g^i
pub fn encode_choice(choice_index: usize, params: &CryptoParams) -> BigUint {
    params.g.modpow(&BigUint::from(choice_index), &params.p)
}

/// Decode a group element back to a choice (by trying all possibilities)
pub fn decode_choice(
    encoded: &BigUint,
    num_choices: usize,
    params: &CryptoParams,
) -> Option<usize> {
    for i in 0..num_choices {
        let test = encode_choice(i, params);
        if test == *encoded {
            return Some(i);
        }
    }
    None
}



================================================
File: voting-core/src/crypto/mod.rs
================================================
pub mod commitment;
pub mod elgamal;
pub mod parameters;
pub mod zkproof;



================================================
File: voting-core/src/crypto/parameters.rs
================================================
//! Cryptographic parameters for the voting system

use num_bigint::BigUint;
use num_traits::{One, Zero};
use serde::{Deserialize, Serialize};

/// Cryptographic parameters for the group
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CryptoParams {
    pub p: BigUint,
    pub g: BigUint,
}

impl CryptoParams {
    pub fn toy_params() -> Self {
        CryptoParams {
            p: BigUint::from(23u32), // not secure, but good for testing
            g: BigUint::from(4u32),
        }
    }

    /// Create slightly larger test parameters
    pub fn test_params() -> Self {
        // Still not secure, but better for testing
        CryptoParams {
            p: BigUint::from(1019u32),
            g: BigUint::from(2u32),
        }
    }
}



================================================
File: voting-core/src/crypto/zkproof.rs
================================================
use super::commitment::verify_commitment;

pub struct ZKProof {
    pub commitment: String,
    pub claimed_choice: String,
    pub nonce: String,
}

impl ZKProof {
    pub fn verify(&self) -> bool {
        verify_commitment(&self.commitment, &self.claimed_choice, &self.nonce)
    }
}



================================================
File: voting-core/src/models/ballot.rs
================================================
use crate::Result;
use crate::crypto::elgamal::{Ciphertext, PublicKey, encode_choice, encrypt};
use crate::crypto::parameters::CryptoParams;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Ballot {
    pub id: Uuid,
    pub ciphertext: Ciphertext,
}

impl Ballot {
    pub fn new(
        choice: &str,
        choices: &[String],
        public_key: &PublicKey,
        params: &CryptoParams,
    ) -> Result<Self> {
        let choice_index = choices
            .iter()
            .position(|c| c == choice)
            .ok_or(crate::VotingError::InvalidChoice)?;

        // Encode the choice as g^index
        let encoded_choice = encode_choice(choice_index, params);

        // Encrypt the encoded choice
        let (ciphertext, _randomness) = encrypt(&encoded_choice, public_key, params);

        Ok(Ballot {
            id: Uuid::new_v4(),
            ciphertext,
        })
    }
    pub fn get_receipt(&self) -> String {
        self.id.to_string()
    }
}



================================================
File: voting-core/src/models/election.rs
================================================
use super::voter::Voter;
use super::{ballot::Ballot, voter::VoterRegistryEntry};
use crate::crypto::elgamal::{self, decrypt};
use crate::crypto::{elgamal::PublicKey, elgamal::SecretKey, parameters::CryptoParams};
use crate::error::{Result, VotingError};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::ops::Index;
use uuid::Uuid;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Election {
    pub id: Uuid,
    pub name: String,
    pub choices: Vec<String>,
    voters: HashMap<Uuid, VoterRegistryEntry>,
    pub ballots: Vec<Ballot>,
    pub public_key: PublicKey,

    #[serde(skip)]
    private_key: Option<SecretKey>,
    pub encryption_params: CryptoParams,
}

impl Election {
    pub fn new(name: String, choices: Vec<String>) -> Self {
        let encryption_params = CryptoParams::toy_params();
        let (public_key, private_key) = elgamal::generate_keypair(&encryption_params);
        let private_key = Some(private_key);
        Election {
            id: Uuid::new_v4(),
            name,
            choices,
            voters: HashMap::new(),
            ballots: Vec::new(),
            public_key,
            private_key,
            encryption_params,
        }
    }

    pub fn add_voter(&mut self, voter: Voter) {
        self.voters.insert(
            voter.id,
            VoterRegistryEntry {
                voter,
                has_voted: false,
            },
        );
    }

    pub fn nb_ballot(&self) -> usize {
        self.ballots.len()
    }

    pub fn is_allowed_voters(&self, voter_id: Uuid) -> bool {
        self.voters.contains_key(&voter_id)
    }

    pub fn is_valid_choice(&self, choice: &str) -> bool {
        self.choices.contains(&choice.to_string())
    }

    pub fn add_ballot(&mut self, ballot: Ballot) -> Result<String> {
        self.ballots.push(ballot);
        Ok(self.ballots.last().unwrap().get_receipt())
    }
    pub fn has_voted(&self, voter_id: &Uuid) -> bool {
        self.voters
            .get(voter_id)
            .is_some_and(|entry| entry.has_voted)
    }
    pub fn set_voted(&mut self, voter_id: &Uuid) {
        if let Some(entry) = self.voters.get_mut(voter_id) {
            entry.has_voted = true;
        }
    }

    pub fn get_ballot_by_id(&self, ballot_id: Uuid) -> Option<&Ballot> {
        self.ballots.iter().find(|b| b.id == ballot_id)
    }

    pub fn generate_inclusion_proof(&self, receipt: &str) -> Option<String> {
        let parts = receipt.split(':').collect::<Vec<&str>>();
        if parts.len() != 2 {
            return None;
        }
        let ballot_id = parts[0];
        for (index, ballot) in self.ballots.iter().enumerate() {
            if ballot.id.to_string() == ballot_id {
                return Some(format!("Ballot found at position {}", index));
            }
        }
        None
    }

    pub fn get_ballot_choice(&self, ballot: &Ballot) -> Option<&String> {
        let encoded_choice = decrypt(
            &ballot.ciphertext,
            self.private_key.as_ref().ok_or(VotingError::DecryptionError("No private key available".to_string()))),
            &self.encryption_params,
        );
        let decrypted_choice =
            elgamal::decode_choice(&encoded_choice, self.choices.len(), &self.encryption_params)?;
        Some(self.choices.index(decrypted_choice))
    }
    pub fn verify_vote(&self, receipt: &str, claimed_choice: &str) -> Option<bool> {
        let parts = receipt.split(':').collect::<Vec<&str>>();
        if parts.len() != 2 {
            return Some(false);
        }
        let ballot_id = parts[0];
        for ballot in &self.ballots {
            if ballot.id.to_string() == ballot_id {
                let encoded_choice = decrypt(
                    &ballot.ciphertext,
                    &self.private_key.as_ref().ok_or(VotingError::DecryptionError("No private key available".to_string()))),
                    &self.encryption_params,
                );
                let decrypted_choice = elgamal::decode_choice(
                    &encoded_choice,
                    self.choices.len(),
                    &self.encryption_params,
                )?;
                if self.choices.index(decrypted_choice) == claimed_choice {
                    return Some(true);
                }
            }
        }
        Some(false)
    }
}



================================================
File: voting-core/src/models/mod.rs
================================================
pub mod ballot;
pub mod election;
pub mod voter;



================================================
File: voting-core/src/models/voter.rs
================================================
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Voter {
    pub id: Uuid,
}

impl Voter {
    pub fn new() -> Self {
        Voter { id: Uuid::new_v4() }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VoterRegistryEntry {
    pub voter: Voter,
    pub has_voted: bool,
}



================================================
File: voting-core/src/services/mod.rs
================================================
pub mod voting;



================================================
File: voting-core/src/services/voting.rs
================================================
use crate::crypto::elgamal::{decode_choice, decrypt};
use std::collections::HashMap;

use crate::error::{Result, VotingError};
use crate::models::ballot::Ballot;
use crate::models::election::Election;
use uuid::Uuid;
pub struct VotingService;

impl VotingService {
    pub fn vote(election: &mut Election, voter_id: Uuid, choice: &str) -> Result<String> {
        if !election.is_allowed_voters(voter_id) {
            return Err(VotingError::VoterNotFound);
        }

        if !election.is_valid_choice(choice) {
            return Err(VotingError::InvalidChoice);
        }
        if election.has_voted(&voter_id) {
            return Err(VotingError::AlreadyVoted);
        }

        let ballot = Ballot::new(
            choice,
            &election.choices,
            &election.public_key,
            &election.encryption_params,
        )?;
        let receipt = election.add_ballot(ballot)?;
        election.set_voted(&voter_id);
        Ok(receipt)
    }

    pub fn verify_vote(election: &Election, receipt: &str, claimed_choice: &str) -> Option<bool> {
        election.verify_vote(receipt, claimed_choice)
    }

    pub fn tally(election: &Election) -> Option<HashMap<String, usize>> {
        let mut tally = HashMap::new();
        // Initialize all choices with 0
        for choice in &election.choices {
            tally.insert(choice.clone(), 0);
        }
        for ballot in &election.ballots {
            let choice = election.get_ballot_choice(ballot)?;
            *tally.entry(choice.to_string()).or_insert(0) += 1;
        }
        Some(tally)
    }
}



================================================
File: voting-core/tests/crypto_test.rs
================================================
use num_bigint::BigUint;
use voting_core::crypto::{
    elgamal::{decode_choice, decrypt, encode_choice, encrypt, generate_keypair},
    parameters::CryptoParams,
};

#[test]
fn test_basic_encryption() {
    let params = CryptoParams::toy_params();
    let (public_key, secret_key) = generate_keypair(&params);

    // Test encrypting and decrypting a message
    let message = BigUint::from(7u32);
    let (ciphertext, _) = encrypt(&message, &public_key, &params);
    let decrypted = decrypt(&ciphertext, &secret_key, &params);

    assert_eq!(message, decrypted);
}

#[test]
fn test_vote_encryption() {
    let params = CryptoParams::toy_params();
    let (public_key, secret_key) = generate_keypair(&params);

    // Simulate voting for choice 1 (out of 3 choices)
    let choice_index = 1;
    let num_choices = 3;

    // Encode and encrypt the choice
    let encoded = encode_choice(choice_index, &params);
    let (ciphertext, _) = encrypt(&encoded, &public_key, &params);

    // Decrypt and decode
    let decrypted = decrypt(&ciphertext, &secret_key, &params);
    let decoded_choice = decode_choice(&decrypted, num_choices, &params);

    assert_eq!(decoded_choice, Some(choice_index));
}



================================================
File: voting-core/tests/election_test.rs
================================================
use voting_core::{
    models::{election::Election, voter::Voter},
    services::voting::VotingService,
};

#[test]
fn test_basic_election_flow() {
    // Create election
    let mut election = Election::new(
        "Test Election".to_string(),
        vec!["Yes".to_string(), "No".to_string()],
    );

    // Add voters
    let voter1 = Voter::new();
    let voter2 = Voter::new();
    let voter3 = Voter::new();
    election.add_voter(voter1.clone());
    election.add_voter(voter2.clone());
    election.add_voter(voter3.clone());

    // Cast votes
    VotingService::vote(&mut election, voter1.id, "Yes").unwrap();
    VotingService::vote(&mut election, voter2.id, "Yes").unwrap();
    VotingService::vote(&mut election, voter3.id, "No").unwrap();

    // Tally
    let results = VotingService::tally(&election).unwrap();

    // Check results
    assert_eq!(results.get("Yes"), Some(&2));
    assert_eq!(results.get("No"), Some(&1));
}

#[test]
fn test_double_voting_prevented() {
    let mut election = Election::new("Test".to_string(), vec!["A".to_string(), "B".to_string()]);

    let voter = Voter::new();
    election.add_voter(voter.clone());

    // First vote should succeed
    assert!(VotingService::vote(&mut election, voter.id, "A").is_ok());

    // Second vote should fail
    assert!(VotingService::vote(&mut election, voter.id, "B").is_err());
}



================================================
File: voting-server/Cargo.toml
================================================
[package]
name = "voting-server"
version.workspace = true
edition.workspace = true


[dependencies]
voting-core = { path = "../voting-core" }
uuid = { version = "1.6", features = ["serde", "v4"] }



================================================
File: voting-server/src/main.rs
================================================
use voting_core::models::election::Election;
use voting_core::models::voter::Voter;
use voting_core::services::voting::VotingService;

fn main() {
    let voter1 = Voter::new();
    let voter2 = Voter::new();
    let mut election = Election::new(
        "Sample Election".to_string(),
        vec!["Option A".to_string(), "Option B".to_string()],
    );
    election.add_voter(voter1.clone());
    election.add_voter(voter2.clone());
    let receipt = VotingService::vote(&mut election, voter1.id, "Option B").unwrap();
    let receipt2 = VotingService::vote(&mut election, voter2.id, "Option A").unwrap();
    println!("Receipt 1: {}", receipt);
    println!("Receipt 2: {}", receipt2);
    println!("{}", election.nb_ballot());
    let vote_res = VotingService::tally(&election);
    println!("{:?}", vote_res);

    let is_valid = election.verify_vote("some_receipt", "Option A");
    println!("Vote verification: {}", is_valid);
    let is_valid = election.verify_vote(&receipt, "Option A");
    println!("Vote verification: {}", is_valid);

    let inclusion_proof = election.generate_inclusion_proof(&receipt);
    println!("Inclusion proof: {:?}", inclusion_proof);
}
